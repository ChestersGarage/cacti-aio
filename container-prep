#!/bin/sh
# Check for passwords at container startup
# Fail to start the container if not provided
if [[ -z "$MYSQL" ]]
then
	echo "Password for MySQL/MariaDB root user was not provided."
	exit 1
fi

# Create new passwords for cacti and backups users
CACTI=$(base64 /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 27 | head -n1)
export BACKUPS=$(base64 /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 27 | head -n1)

# All the default confgs from package installtion are here.
# If any are missing from their normal locations at startup,
# the steps below will restore them.
BACKUPDIR="/root/default-configs"

# It's who we are
export CONTAINERFQDN=$(hostname)
# It's when we are
TIMESTAMP=$(date +%Y-%m-%d-%H%M%S)

# Look for the main httpd.conf
# If it's missing, the rest doesn't matter and will be moved to bak.
if [[ ! -f /etc/apache2/httpd.conf ]]
then
	# We don't want anything else that might be in there either
	mkdir -p /etc/apache2/bak/${TIMESTAMP}
	cd /etc/apache2
	EXISTING_DATA=$(ls -1 | grep -v bak)
	if [[ !-z ${EXISTING_DATA} ]]
	then
        mv ${EXISTING_DATA} /etc/apache2/bak/${TIMESTAMP}/
	fi
	# Copy in the defaults
	cp -rpf ${BACKUPDIR}/apache/* /etc/apache2/
fi

# Drop the current host name into a config file so Apache doesn't complain about it at startup
echo "ServerName ${CONTAINERFQDN}" > /etc/apache2/conf.d/fqdn.conf

# Look for the main php.ini file
# If it's missing, the rest doesn't matter and will be moved to bak.
if [[ ! -f /etc/php7/php.ini ]]
then
	mkdir -p /etc/php7/bak/${TIMESTAMP}
	cd /etc/php7
	EXISTING_DATA=$(ls -1 | grep -v bak)
	if [[ !-z ${EXISTING_DATA} ]]
	then
        mv -f ${EXISTING_DATA} /etc/php7/bak/${TIMESTAMP}/
    fi
	sed -i "s|\;date.timezone =|date.timezone = \"${TZ}\"|" ${BACKUPDIR}/php7/php.ini
	cp -rpf ${BACKUPDIR}/php7/* /etc/php7/
fi

# Look for main my.cnf file
# If it's mising, the rest doesn't matter
# Everything else will be moved to bak.
if [[ ! -f /etc/mysql/my.cnf ]]
then
	mkdir -p /etc/mysql/bak/${TIMESTAMP}
	cd /etc/mysql
	EXISTING_DATA=$(ls -1 | grep -v bak)
	if [[ !-z ${EXISTING_DATA} ]]
	then
    	mv ${EXISTING_DATA} /etc/mysql/bak/${TIMESTAMP}/
	fi
	# Then set our config
	cat > /etc/mysql/my.cnf <<EOF
[mysqld]
collation_server = utf8mb4_unicode_ci
character_set_server = utf8mb4
max_heap_table_size = 1024M
max_allowed_packet = 16M
tmp_table_size = 128M
join_buffer_size = 128M
innodb_buffer_pool_size = 4096M
innodb_doublewrite = OFF
innodb_flush_log_at_timeout = 10
innodb_read_io_threads = 32
innodb_write_io_threads = 16
EOF
fi

# Check for the presence of a cacti database folder in the mysql data
# If it's missing, initialize MySQL/MariaDB.
# Everything else will be moved to bak.
if [[ ! -d /var/lib/mysql/cacti ]]
then
	# Start from fresh
	# Move any existing files out of the way
	mkdir -p /var/lib/mysql/bak/${TIMESTAMP}
	cd /var/lib/mysql
	EXISTING_DATA=$(ls -1 | grep -v bak)
	if [[ !-z ${EXISTING_DATA} ]]
	then
    	mv ${EXISTING_DATA} /var/lib/mysql/bak/${TIMESTAMP}/
    fi
	# Initialize the database
	/etc/init.d/mariadb setup
	# Start MySQL/MariaDB
	nohup /usr/bin/mysqld_safe --datadir="/var/lib/mysql" &
	sleep 3
	# Set the MySQL root password
	mysqladmin -uroot password ${MYSQL}
	# Ingest timezone data from the O/S
	mysql_tzinfo_to_sql /usr/share/zoneinfo | mysql -uroot -p${MYSQL} mysql
	# Set the current timezone for MySQL 
	echo 'default-time-zone = '$TZ >> /etc/mysql/my.cnf
	# Refresh the running MySQL server
	mysqladmin -uroot -p${MYSQL} reload
	# Create the cacti database
	mysqladmin -uroot -p${MYSQL} create cacti
	# Ingest the cacti initialization script
	mysql -uroot -p${MYSQL} cacti < /usr/share/webapps/cacti/cacti.sql
else
	# With exising data, just start the database so we can set up user access.
	nohup /usr/bin/mysqld_safe --datadir="/var/lib/mysql" &
	sleep 3
fi

# Verify provided MySQL root password is valid.
echo "exit" | mysql -uroot -p${MYSQL}
if [[ "$?" != "0" ]]
then
	echo "Cannot connect to MySQL with the provided root password."
	exit 1
fi

# Set up cacti application access to the database
# The success of all this depends on the correct MySQL root password being provided.
# Clear out old user tables entries
echo "DELETE FROM mysql.user WHERE User = 'cactiuser';" | mysql -uroot -p${MYSQL}
echo "DELETE FROM mysql.user WHERE User = 'backups';" | mysql -uroot -p${MYSQL}

# Create a user for running backups
echo "GRANT LOCK TABLES, SELECT ON *.* TO 'backups'@'${CONTAINERFQDN}' IDENTIFIED BY '${BACKUPS}';" | mysql -uroot -p${MYSQL}
echo "GRANT LOCK TABLES, SELECT ON *.* TO 'backups'@'localhost' IDENTIFIED BY '${BACKUPS}';" | mysql -uroot -p${MYSQL}

# Create the cacti user
echo "GRANT ALL ON cacti.* TO 'cactiuser'@'${CONTAINERFQDN}' IDENTIFIED BY '${CACTI}';" | mysql -uroot -p${MYSQL}
echo "GRANT ALL ON cacti.* TO 'cactiuser'@'localhost' IDENTIFIED BY '${CACTI}';" | mysql -uroot -p${MYSQL}

echo "GRANT SELECT ON mysql.time_zone_name TO 'cactiuser'@'${CONTAINERFQDN}' IDENTIFIED BY '${CACTI}';" | mysql -uroot -p${MYSQL}
echo "GRANT SELECT ON mysql.time_zone_name TO 'cactiuser'@'localhost' IDENTIFIED BY '${CACTI}';" | mysql -uroot -p${MYSQL}

# Avoid unix sockets based access
echo "UPDATE mysql.user SET plugin = 'mysql_native_password' WHERE User = 'cactiuser';" | mysql -uroot -p${MYSQL}
echo "UPDATE mysql.user SET plugin = 'mysql_native_password' WHERE User = 'backups';" | mysql -uroot -p${MYSQL}
echo "UPDATE mysql.user SET plugin = 'mysql_native_password' WHERE User = 'root';" | mysql -uroot -p${MYSQL}
echo "flush privileges;" | mysql -uroot -p${MYSQL}

# Shut down MySQL before transitioning to service startup.
mysqladmin -uroot -p${MYSQL} shutdown

# Set the spine.conf with current info
# The docs say to use DB_Password, but actually DB_Pass is correct.
# https://www.cacti.net/downloads/docs/html/unix_configure_spine.html
cat > /usr/local/spine/etc/spine.conf <<EOF
DB_Host ${CONTAINERFQDN}
DB_Database cacti
DB_User cactiuser
DB_Pass ${CACTI}
DB_Port 3306
EOF

# These don't work, but I'm keeping them here as a reminder to figure out a way to make them work.
# The problem is these are set prior to cacti's first-run process, which overwrites them.
# I could force these in a cron job, but it would lock out recovery other than killing the container.
#echo "INSERT INTO cacti.settings VALUES ("path_spine","/usr/local/spine/bin/spine");" | mysql -uroot -p${MYSQL}
#echo "INSERT INTO cacti.settings VALUES ("path_spine_config","/usr/local/spine/etc/spine.conf");" | mysql -uroot -p${MYSQL}
#echo "UPDATE cacti.settings SET value = "2" WHERE settings.name = 'poller_type';" | mysql -uroot -p${MYSQL}

# Set the DB info for cacti.
# Many characters can disrupt this.
# Avoid & and ! and possibly others in passwords.
sed -i "s/database_hostname = 'localhost'/database_hostname = '${CONTAINERFQDN}'/" /usr/share/webapps/cacti/include/config.php
sed -i "s/database_password = 'cactiuser'/database_password = '${CACTI}'/" /usr/share/webapps/cacti/include/config.php

# This gets reset to root:root for some reason, so I set it back.
# Probably caused by host permissions. (to-do)
chown -R cacti:cacti /var/lib/cacti/rra
chown -R mysql:mysql /var/lib/mysql

# Set the default backup schedule, if not provided
CRON_PATTERN=${CRON_PATTERN:-2 * * * *}
echo "${CRON_PATTERN} /backup > /dev/null 2>&1" >> /var/spool/cron/crontabs/root

# If you use /bin/sh, make sure you source this file after logging in.
echo "export BACKUPS=${BACKUPS}" >> /root/.bashrc
# I use ll all the time.
echo "alias ll='ls -l'" >> /root/.bashrc

# Now start all the services.
/init-services